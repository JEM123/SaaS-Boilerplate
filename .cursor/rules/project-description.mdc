---
alwaysApply: true
---
# üèóÔ∏è Project Description ‚Äî SiteFlow (Construction SaaS, reboot)

> T√†i li·ªáu m√¥ t·∫£ chi ti·∫øt d·ª± √°n SiteFlow, **b√°m s√°t boilerplate** v√† **ti√™u chu·∫©n SaaS** hi·ªán c√≥.  
> M·ª•c ti√™u: kh·ªüi ƒë·ªông l·∫°i d·ª± √°n m·ªôt c√°ch ‚Äús·∫°ch ‚Äì ƒë√∫ng ‚Äì testable‚Äù, ƒë·ªÉ giao cho Cursor AI th·ª±c thi theo c√°c phase chu·∫©n.

---

## 1) Boilerplate & Tech Stack (r·∫•t c·ª• th·ªÉ)

- **Boilerplate g·ªëc**: ixartz/SaaS-Boilerplate (Next.js 14 App Router, TypeScript).  
- **Th∆∞ vi·ªán ch√≠nh**: Next 14, React 18, Tailwind + shadcn/ui (Radix), Clerk (Auth + Orgs), Drizzle ORM + PostgreSQL, Playwright (E2E), Vitest (unit/integration), Storybook, Sentry. 
- **i18n**: `next-intl` (ƒëa ng√¥n ng·ªØ theo `[locale]`). 
- **Scripts chu·∫©n trong repo**:
  - Dev: `pnpm dev` (ch·∫°y song song nhi·ªÅu ti·∫øn tr√¨nh) 
  - Build/Start: `pnpm build`, `pnpm start` 
  - Lint/Types: `pnpm lint`, `pnpm check-types` 
  - Test: `pnpm test` (Vitest), `pnpm test:e2e` (Playwright) 
  - Drizzle: `pnpm db:generate`, `pnpm db:migrate`, `pnpm db:studio` 
- **ƒê∆∞·ªùng d·∫´n Schema Drizzle (quan tr·ªçng)**: `./src/models/Schema.ts` (ƒë√∫ng theo `drizzle.config.ts`) ‚Üí **gi·ªØ nguy√™n ƒë·ªÉ tr√°nh import sai**. 
- **CI/CD + QA gate** (ƒë·ªãnh h∆∞·ªõng theo roadmap): lint, typecheck, build, test, e2e ch·∫°y trong GH Actions, b·∫≠t branch protection cho PR. 

> ‚úÖ Ghi nh·ªõ: **KH√îNG** ƒë·ªïi sang `src/db/schema.ts` tr·ª´ khi c·∫≠p nh·∫≠t lu√¥n `drizzle.config.ts`. M·∫∑c ƒë·ªãnh d·ª± √°n ƒëang tr·ªè `src/models/Schema.ts`. 

---

## 2) M·ª•c ti√™u s·∫£n ph·∫©m (Business Objectives)

- Minh b·∫°ch ti·∫øn ƒë·ªô & chi ph√≠ d·ª± √°n x√¢y d·ª±ng (realtime).  
- Nh·∫≠t k√Ω c√¥ng tr∆∞·ªùng chu·∫©n h√≥a (·∫£nh/video, nh√¢n c√¥ng, th·ªùi ti·∫øt).  
- Chia s·∫ª cho ch·ªß ƒë·∫ßu t∆∞ qua link b·∫£o m·∫≠t (c√≥ th·ªÉ ·∫©n t√†i ch√≠nh).  
- N·ªÅn t·∫£ng ƒëa t·ªï ch·ª©c (multi-tenant) qua **Clerk Orgs** + RLS Postgres. 

---

## 3) Personas (vai tr√≤ ng∆∞·ªùi d√πng)

- **Admin**: qu·∫£n tr·ªã tenant, ph√¢n quy·ªÅn.  
- **PM (Project Manager)**: l·∫≠p k·∫ø ho·∫°ch, duy·ªát nh·∫≠t k√Ω, gi√°m s√°t budget/progress.  
- **Engineer**: nh·∫≠p nh·∫≠t k√Ω, upload media, c·∫≠p nh·∫≠t tr·∫°ng th√°i task.  
- **Accountant**: nh·∫≠p/so√°t chi ph√≠.  
- **Ch·ªß ƒë·∫ßu t∆∞ (Viewer)**: xem ti·∫øn ƒë·ªô qua **public Share Link** (·∫©n t√†i ch√≠nh n·∫øu c·∫ßn). 

---

## 4) Domain Model & Lu·ªìng nghi·ªáp v·ª•

- C·∫•u tr√∫c: **Project ‚Üí Category (H·∫°ng m·ª•c) ‚Üí Task (ƒê·∫ßu vi·ªác)**.  
- **DailyLog**: g·∫Øn v·ªõi **1 Category**, **ch·ªçn nhi·ªÅu Tasks** thu·ªôc Category ƒë√≥ (ghi nh·∫≠n ti·∫øn ƒë·ªô th·ª±c t·∫ø).  
- **DailyLogTask**: l∆∞u **tr·∫°ng th√°i m·ªõi nh·∫•t** c·ªßa t·ª´ng Task trong log (WAITING / IN_PROGRESS / DONE).  
- **MediaAsset**: ·∫£nh/video ƒë√≠nh k√®m DailyLog.  
- **Transaction**: ADVANCE / EXPENSE, ph·ª•c v·ª• so kh·ªõp **Spend vs Budget**.  
- **ShareLink**: link public c√≥ token, t√πy ch·ªçn **·∫©n t√†i ch√≠nh**. 

### Quy t·∫Øc t√≠nh ti·∫øn ƒë·ªô (Category & Project)
```
progress = (100 / N) * (#DONE + 0.5 * #IN_PROGRESS)
```
- `N` = t·ªïng s·ªë Task trong Category.  
- L·∫•y **status m·ªõi nh·∫•t** t·ª´ `daily_log_tasks` (n·∫øu thi·∫øu th√¨ fallback `tasks.status`). 

---

## 5) Data Model (b·∫£n t√≥m t·∫Øt th·ª±c thi)

- **B·∫£ng ch√≠nh**: `projects, categories, tasks, daily_logs, daily_log_tasks, media_assets, transactions, share_links`  
- **R√†ng bu·ªôc quan tr·ªçng**:
  - `tasks.categoryId` ‚Üí FK `categories.id`  
  - `daily_logs.categoryId`, `daily_logs.projectId`  
  - `daily_log_tasks.dailyLogId` + `taskId` (unique/PK t√πy thi·∫øt k·∫ø)  
  - Enum Postgres: `project_status`, `task_status`, `log_task_status`, `media_kind`, `transaction_type`  
  - **Org isolation**: `orgId` ·ªü t·∫•t c·∫£ b·∫£ng; audit fields; soft delete (`deletedAt`)  
  - Ch·ªâ m·ª•c (indexes) ƒë·∫ßy ƒë·ªß cho truy v·∫•n ti·∫øn ƒë·ªô & nh·∫≠t k√Ω. 

> Ghi ch√∫: c√°c c·∫£nh b√°o & b·∫£n v√° tr∆∞·ªõc ƒë√¢y (ENUM th·∫≠t, unique token share_links, nhi·ªÅu index/FK) ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n trong log Phase 1. 

---

## 6) B·∫£o m·∫≠t, T·ªï ch·ª©c & Ph√¢n quy·ªÅn (RBAC + RLS)

- **Clerk Orgs + Roles**: `ADMIN`, `PM`, `ENGINEER`, `ACCOUNTANT`.  
- **Middleware `withRole`** + helper `hasRole()` cho ki·ªÉm tra role v√† **set context org**.  
- **Postgres RLS** tr√™n 8 b·∫£ng, policy d·∫°ng `org_id = current_setting('app.current_org')::uuid`.  
- **Endpoint** demo ki·ªÉm tra quy·ªÅn: `/api/v1/_rbac-check`. 

---

## 7) Chu·∫©n API v1

- **ƒê∆∞·ªùng d·∫´n**: `/api/v1/{entity}` (projects, categories, tasks, daily-logs, daily-log-tasks, transactions, share-links, cloudinary/sign). 
- **Validation**: Zod; **Error**: RFC7807; **Pagination**: cursor-based; **Soft delete**: m·∫∑c ƒë·ªãnh l·ªçc `deletedAt IS NULL`. 
- **Progress endpoints**:  
  - `GET /api/v1/categories/:id/progress`  
  - `GET /api/v1/projects/:id/progress` 
- **Cloudinary**: `POST /api/v1/cloudinary/sign` ƒë·ªÉ FE upload tr·ª±c ti·∫øp v√† l∆∞u metadata qua `/api/v1/media-assets`. 

---

## 8) Frontend Architecture & Routing (App Router)

- **Canonical routing** (URL c√¥ng khai **kh√¥ng ch·ª©a** `(auth)`):
  - `src/app/[locale]/(auth)/dashboard/page.tsx` ‚Üí `/{locale}/dashboard`
  - `src/app/[locale]/(auth)/projects/page.tsx` ‚Üí `/{locale}/projects`
  - `src/app/[locale]/(auth)/projects/[id]/overview/page.tsx` ‚Üí `/{locale}/projects/{id}/overview`
  - `src/app/[locale]/share/[token]/page.tsx` (public, **kh√¥ng** sidebar) ‚Üí `/{locale}/share/{token}`  
  (v√† c√°c tab: tasks, daily-logs, finance, share-links). 
- **Shared shell** (sidebar + header) t·∫°i layout c·ªßa `(auth)`; public Share kh√¥ng d√πng shell.  
- **A11y & QA**: console-clean gate, axe serious/critical = 0 (chu·∫©n tr∆∞·ªõc Phase 7). 

---

## 9) Media & Upload

- FE d√πng component upload (shadcn + Cloudinary direct upload).  
- BE k√Ω l√™n Cloudinary (`/api/v1/cloudinary/sign`), sau ƒë√≥ l∆∞u **metadata** v√†o `media_assets`. 

---

## 10) Finance (Budget vs Spend)

- `transactions` g·ªìm **ADVANCE/EXPENSE**; t√≠nh **Spend vs Budget**; hi·ªÉn th·ªã c·∫£nh b√°o **over-budget** ·ªü Project Detail / Finance tab. 

---

## 11) Share Links (Public Transparency)

- T·∫°o token ‚Üí public page `/share/{token}`, c√≥ tu·ª≥ ch·ªçn ·∫©n t√†i ch√≠nh.  
- Ch·ªâ ƒë·ªçc: hi·ªÉn th·ªã progress h·∫°ng m·ª•c/d·ª± √°n; kh√¥ng c√≥ sidebar. 

---

## 12) Qu·ªëc t·∫ø ho√° (i18n)

- C·∫•u tr√∫c route `[locale]` + `next-intl`.  
- T·ªëi thi·ªÉu `vi`/`en`; c√°c pages auth n·∫±m d∆∞·ªõi `(auth)` ƒë·ªÉ gi·ªØ shell nh·∫•t qu√°n. 

---

## 13) Dev Workflow (ch·∫°y ƒë√∫ng boilerplate)

### M√¥i tr∆∞·ªùng
- T·∫°o `.env.local`: `DATABASE_URL`, `CLERK_SECRET_KEY`, (E2E) `E2E_AUTH_BYPASS=1`. 

### L·ªánh ch·∫°y
- **C√†i**: `pnpm install`  
- **Dev**: `pnpm dev` (boilerplate ƒë√£ c·∫•u h√¨nh `run-p dev:*`) 
- **DB**:  
  - Gen migration: `pnpm db:generate`  
  - Apply migration: `pnpm db:migrate`  
  - Studio: `pnpm db:studio` 
- **Test**:  
  - Unit/Integration: `pnpm test`  
  - E2E: `pnpm test:e2e` 
- **Commit**: `pnpm commit` (Commitizen + Conventional Commits). 

### Nguy√™n t·∫Øc merge
- M·ªói Phase ‚Üí 1 branch/PR, CI ph·∫£i xanh; console-clean; E2E smoke pass; a11y pass. 

---

## 14) Definition of Done (MVP)

- Schema 8 b·∫£ng + audit/soft delete/orgId, migration-first. 
- RBAC: Clerk Orgs + Roles + RLS, endpoint `_rbac-check`. 
- API v1 CRUD full + Zod + RFC7807 + pagination + soft delete. 
- Progress service ƒë√∫ng c√¥ng th·ª©c, ‚Äúlatest status‚Äù t·ª´ `daily_log_tasks`. 
- Media upload (Cloudinary) l∆∞u metadata. 
- UI: Dashboard + Project Detail (Overview, Tasks, Daily Logs, Finance, Share Links), Public Share. 
- Finance c·∫£nh b√°o over-budget. 
- Tests (unit/integration/E2E) pass + CI xanh. 

---

## 15) NFRs (phi ch·ª©c nƒÉng) & chu·∫©n ch·∫•t l∆∞·ª£ng

- **Security**: CSP, HSTS, Referrer-Policy, Permissions-Policy; secrets trong `.env`; kh√¥ng hardcode. 
- **Performance**: truy v·∫•n ti·∫øn ƒë·ªô <100ms (index h·ª£p l√Ω, view t·ªëi ∆∞u). 
- **Observability**: Sentry t√≠ch h·ª£p ƒë·ªÉ log l·ªói prod. 
- **A11y**: axe serious/critical = 0 ·ªü c√°c trang tr·ªçng y·∫øu (Projects, Project Detail). 

---

## 16) L·ªô tr√¨nh tri·ªÉn khai (t√≥m t·∫Øt)

- Phase 0: Setup & QA foundation.  
- Phase 1: Schema & Migration.  
- Phase 2: RBAC & RLS.  
- Phase 3: API v1.  
- Phase 4: Progress.  
- Phase 5: Media Upload.  
- Phase 6: UI ƒë·∫ßy ƒë·ªß + canonical routing.  
- Phase 7: Testing & CI.  
- Phase 8: Deploy & Monitoring. 
